---
import Layout from "../layouts/BaseLayout.astro";
import Link from "../components/Link.astro";
import { HebrewCalendar, HDate, Location, Event, parshiot } from "@hebcal/core";
import {
    getLeyningOnDate,
    getLeyningForParshaHaShavua,
    getLeyningForParsha,
    formatAliyahShort,
    getLeyningForHoliday,
} from "@hebcal/leyning";

const props = {
    title: "",
    description: "",
    image: "home",
};

function getStartAndEndOfWeek() {
    const now = new Date();
    const dayOfWeek = now.getDay();

    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - dayOfWeek);

    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);

    return {
        startOfWeek,
        endOfWeek,
    };
}

const startOfWeek = new HDate(getStartAndEndOfWeek().startOfWeek);
const endOfWeek = new HDate(getStartAndEndOfWeek().endOfWeek);

// function getSheminiAtzeretDate(year: number) {
//     const holidays = HebrewCalendar.getHolidaysForYear(year);
//     let sheminiAtzeretDate;

//     for (let [hebrewDate, holidayEvents] of Object.entries(holidays)) {
//         for (let holidayEvent of holidayEvents) {
//             if (holidayEvent.getDesc() === "Shmini Atzeret") {
//                 sheminiAtzeretDate = holidayEvent.getDate().greg();
//                 break;
//             }
//         }
//         if (sheminiAtzeretDate) break;
//     }
//     return sheminiAtzeretDate;
// }

interface ReadingData {
    date: string;
    dayOfWeek: string;
    dateTime: string;
    name: string;
    readingSummary: string;
    haftara?: string;
}

const readingsData: ReadingData[] = [];

function handleReading(reading: any, date: HDate) {
     if (reading.hasOwnProperty('weekday')) {
        return;
    }
    const dateObj = date.greg();
    const formattedDate = dateObj.toISOString().split("T")[0];

    const monthDayOptions: Intl.DateTimeFormatOptions = {
        month: "long",
        day: "numeric",
    };

    const otherDateFormatted = dateObj.toLocaleDateString(
        undefined,
        monthDayOptions
    );

    const localDate = dateObj.toLocaleDateString();
    const dayOfWeek = dateObj.toLocaleString("en-US", { weekday: "short" });

    const portion =
        reading.parsha && reading.parsha.length > 1
            ? reading.parsha.join("-")
            : reading.parsha
            ? reading.parsha[0]
            : undefined;

    let holiday = reading.name.en;
    holiday = holiday.replace(/(\(on Shabbat\)|I|II)/g, "").trim();

    readingsData.push({
        date: localDate,
        dayOfWeek: dayOfWeek,
        dateTime: formattedDate,
        name: reading.parsha || reading.name.en,
        readingSummary: reading.summary,
        haftara: reading.haftara,
    });
}

for (
    let date = startOfWeek;
    date.deltaDays(endOfWeek) <= 0;
    date = date.next()
) {
    let holidays = HebrewCalendar.getHolidaysOnDate(date);
    const isHoliday = holidays && holidays.length > 0;
    if (date.getDay() === 6 || isHoliday) {
        const readings = getLeyningOnDate(date, false);
        if (Array.isArray(readings)) {
            // Loop through each Leyning object and handle it
            for (const reading of readings) {
                handleReading(reading, date);
            }
        } else {
            // We have a single Leyning object, so handle it
            handleReading(readings, date);
        }
    }
}

const options = {
    start: startOfWeek,
    end: endOfWeek,
    candlelighting: true,
    location: Location.lookup("San Diego"),
    omer: true,
    sedrot: true,
};

const events = HebrewCalendar.calendar(options);

let eventNames: string[] = [];

for (let event of events) {
    // Get the name of the constructor function (which should match the class name)
    let eventType = event.constructor.name;

    // Add the event name to the array.
    eventNames.push(eventType);
}

// Convert the array to a Set and back to an array to remove duplicates
eventNames = [...new Set(eventNames)];

let eventArray = [];

for (const ev of events) {
    const hd = ev.getDate();
    const date = hd.greg();
    const dateString = date.toLocaleDateString();
    const dayOfWeek = date.toLocaleString("en-US", { weekday: "short" });

    // Check if there's already an object for this date
    let dateObj = eventArray.find(
        (
            obj
        ): obj is {
            Date: string;
            DayOfWeek: string;
            Events: Array<{ Event: string }>;
        } => obj.Date === dateString
    );

    if (!dateObj) {
        // If there's no object for this date, create one
        dateObj = {
            Date: dateString,
            DayOfWeek: dayOfWeek,
            Events: [],
        };
        eventArray.push(dateObj);
    }

    // Add the current event to the date object
    dateObj.Events.push({
        Event: ev.render("en"),
    });
}

let combinedData = eventArray.map(eventObj => {
    const readingObj = readingsData.find(readingObj => readingObj.date === eventObj.Date);
    return {
        ...eventObj,
        readingData: readingObj
    }
});
---

<Layout {...props}>
    <main>
        <ul>
  {combinedData.map(({ DayOfWeek, Events, readingData }) => (
    <li>
      <span>{DayOfWeek}</span>
      <ul>
        {Events.map(({ Event }) => (
          <li>{Event}</li>
        ))}
      </ul>
      {readingData && (
        <ul class="fa-ul">

          <li>
            <span class="fa-li">
              <i class="fa-solid fa-scroll-torah" />
            </span>
            Torah: {readingData.readingSummary}
          </li>

          {readingData.haftara && (
            <li>
              <span class="fa-li">
                <i class="fa-solid fa-book-tanakh" />
              </span>
              <p>Haftara: {readingData.haftara}</p>
            </li>
          )}
        </ul>
      )}
    </li>
  ))}
</ul>

    </main>
</Layout>
