---
import Layout from "../layouts/BaseLayout.astro";
import Link from "../components/Link.astro";
import { readingsData, processAllReadings, resetReadingsData } from "./data";
import { HebrewCalendar, HDate, Location, Event } from "@hebcal/core";
import { getTriennialForParshaHaShavua } from "@hebcal/triennial";

const props = {
  title: "",
  description: "",
  image: "home",
};

const citiesByCountry = {
  USA: [
    "Atlanta",
    "Austin",
    "Baltimore",
    "Boston",
    "Buffalo",
    "Chicago",
    "Cincinnati",
    "Cleveland",
    "Dallas",
    "Denver",
    "Detroit",
    "Houston",
    "Las Vegas",
    "Los Angeles",
    "Miami",
    "Minneapolis",
    "New York",
    "Omaha",
    "Pawtucket",
    "Philadelphia",
    "Phoenix",
    "Pittsburgh",
    "Providence",
    "Portland",
    "Saint Louis",
    "San Diego",
    "San Francisco",
    "Seattle",
    "Washington DC",
    "Worcester",
  ],
  Israel: [
    "Ashdod",
    "Beer Sheva",
    "Eilat",
    "Haifa",
    "Jerusalem",
    "Tel Aviv",
    "Tiberias",
    "Petach Tikvah",
  ],
  Iraq: ["Baghdad"],
  Germany: ["Berlin"],
  Colombia: ["Bogota"],
  Hungary: ["Budapest"],
  Argentina: ["Buenos Aires"],
  Gibraltar: ["Gibraltar"],
  Hawaii: ["Hawaii"],
  Finland: ["Helsinki"],
  "South Africa": ["Johannesburg"],
  Ukraine: ["Kiev"],
  Bolivia: ["La Paz"],
  Zambia: ["Livingston"],
  UK: ["London"],
  France: ["Marseilles", "Paris"],
  Australia: ["Melbourne", "Sydney"],
  Mexico: ["Mexico City"],
  Canada: ["Montreal", "Ottawa", "Toronto", "Vancouver"],
  Russia: ["Moscow", "Saint Petersburg"],
  Panama: ["Panama City"],
  Brazil: ["Sao Paulo"],
};

const countries = Object.keys(citiesByCountry);
const cities = Object.values(citiesByCountry);
const citiesString = cities.flat();
let selectedCountry = countries[0];
const selectedCities =
  (citiesByCountry as { [key: string]: string[] })[selectedCountry] || [];
let selectedCity = selectedCities[0];

function getStartAndEndOfWeek() {
  const now = new Date();
  const dayOfWeek = now.getDay();

  const startOfWeek = new Date(now);
  startOfWeek.setDate(now.getDate() - dayOfWeek);

  const endOfWeek = new Date(startOfWeek);
  endOfWeek.setDate(startOfWeek.getDate() + 6);

  return {
    startOfWeek,
    endOfWeek,
  };
}

const startOfWeek = new HDate(getStartAndEndOfWeek().startOfWeek);
const endOfWeek = new HDate(getStartAndEndOfWeek().endOfWeek);

resetReadingsData();
processAllReadings(startOfWeek, endOfWeek);

interface EventDetails {
  Event: string;
  EventType: string;
}

interface EventType {
  Date: string;
  DayOfWeek: string;
  Events: EventDetails[];
}

function generateEventObject(ev: Event, eventArray: Map<string, EventType>) {
  const eventType = ev.constructor.name;
  const hd = ev.getDate();
  const date = hd.greg();
  const dateString = date.toLocaleDateString();
  const dayOfWeek = date.toLocaleString("en-US", { weekday: "short" });

  let dateObj = eventArray.get(dateString) || {
    Date: dateString,
    DayOfWeek: dayOfWeek,
    Events: [],
  };

  dateObj.Events.push({
    Event: ev.render("en"),
    EventType: eventType,
  });

  eventArray.set(dateString, dateObj);
}

interface CityTimes {
  city: string;
  candlelighting?: string;
  havdalah?: string;
}

function generateCityTimes(
  citiesString: string[],
  startOfWeek: Date,
  endOfWeek: Date
): CityTimes[] {
  const cityTimes: CityTimes[] = [];

  for (let city of citiesString) {
    const options = {
      start: startOfWeek,
      end: endOfWeek,
      candlelighting: true,
      location: Location.lookup(city),
    };

    const candleLightingEvents = HebrewCalendar.calendar(options);

    const cityEventTimes: CityTimes = { city };

    for (let event of candleLightingEvents) {
      if (event.constructor.name === "CandleLightingEvent") {
        cityEventTimes.candlelighting = event.render("en");
      } else if (event.constructor.name === "HavdalahEvent") {
        cityEventTimes.havdalah = event.render("en");
      }
    }
    cityTimes.push(cityEventTimes);
  }

  return cityTimes;
}

const options = {
  start: startOfWeek,
  end: endOfWeek,
  candlelighting: true,
  location: Location.lookup(selectedCity),
  omer: true,
  sedrot: true,
};

const events = HebrewCalendar.calendar(options);
const eventArray = new Map();

for (const ev of events) {
  generateEventObject(ev, eventArray);
}

const combinedData = Array.from(eventArray.values()).map((eventObj) => {
  const readingObj = readingsData.find(
    (readingObj) => readingObj.date === eventObj.Date
  );
  return {
    ...eventObj,
    readingData: readingObj,
  };
});

const startOfWeekDate: Date = startOfWeek.greg();
const endOfWeekDate: Date = endOfWeek.greg();
const cityTimes = generateCityTimes(
  citiesString,
  startOfWeekDate,
  endOfWeekDate
);
---

<Layout {...props}>
  <main>
    <div>
      <label for="country-select">Choose a country:</label>
      <select
        name="country"
        id="country-select"
        data-selected-country={selectedCountry}
      >
        {countries.map((country) => <option value={country}>{country}</option>)}
      </select>

      <label for="city-select">Choose a city:</label>
      <select
        name="city"
        id="city-select"
        data-cities={JSON.stringify(citiesByCountry)}
      >
        {selectedCities.map((city) => <option value={city}>{city}</option>)}
      </select>
    </div>

    <ul>
      {
        combinedData.map(({ DayOfWeek, Events, readingData }) => (
          <li>
            <span>{DayOfWeek}</span>

            <ul data-citytimes={JSON.stringify(cityTimes)}>
              {Events.map(({ Event, EventType }: EventDetails) => (
                <li
                  data-lighting={
                    EventType === "CandleLightingEvent" ||
                    EventType === "HavdalahEvent"
                  }
                >
                  {Event}
                </li>
              ))}
            </ul>

            {readingData && (
              <>
                <ul class="fa-ul">
                  <li>
                    <span class="fa-li">
                      <i class="fa-solid fa-scroll-torah" />
                    </span>
                    Torah: {readingData.readingSummary}
                  </li>
                  <details>
                    <summary>Aliyot Details</summary>
                    <ul>
                      {readingData.aliyot.map((aliyah) => (
                        <li>
                          {aliyah.number}: {aliyah.description} (
                          {aliyah.verseCount ?? "N/A"} verses)
                          {aliyah.reason && <div>Reason: {aliyah.reason}</div>}
                        </li>
                      ))}
                    </ul>
                  </details>

                  {readingData.haftara && (
                    <li>
                      <span class="fa-li">
                        <i class="fa-solid fa-book-tanakh" />
                      </span>
                      <p>Haftara: {readingData.haftara}</p>
                    </li>
                  )}
                </ul>
                <span>
                  {" "}
                  view this year's
                  <Link href="/torah-readings">torah readings</Link>
                </span>
              </>
            )}
          </li>
        ))
      }
    </ul>
  </main>
</Layout>

<script>
  let countrySelect = document.getElementById(
    "country-select"
  ) as HTMLInputElement;
  let citySelect = document.getElementById("city-select") as HTMLInputElement;
  let cityTimesElement = document.querySelector(
    "[data-citytimes]"
  ) as HTMLElement;
  let lightingElements = document.querySelectorAll("[data-lighting]");

  let countryHandler = function (event: Event) {
    const selectedCountry = countrySelect.value;
    let cities;
    if (citySelect.dataset.cities !== undefined) {
      cities = JSON.parse(citySelect.dataset.cities);
    }
    const citiesInSelectedCountry = cities[selectedCountry] || [];

    // Clear the city select
    while (citySelect.firstChild) {
      citySelect.removeChild(citySelect.firstChild);
    }

    // Populate the city select with the cities in the selected country
    for (let city of citiesInSelectedCountry) {
      let option = document.createElement("option");
      option.text = city;
      option.value = city;
      citySelect.appendChild(option);
    }
  };

  let handler = function (event: Event) {
    let selectedCity = citySelect.value;
    let selectedCityTimes;

    // Parse cityTimes from the data attribute
    if (cityTimesElement) {
      const cityTimes = cityTimesElement.dataset.citytimes;
      const parsedCityTimes = cityTimes ? JSON.parse(cityTimes) : {};
      for (let cityTime of parsedCityTimes) {
        // Check if the cityTime is for the selected city
        if (cityTime.city === selectedCity) {
          selectedCityTimes = cityTime;
          break;
        }
      }
      lightingElements[0].innerHTML = selectedCityTimes.candlelighting;
      lightingElements[1].innerHTML = selectedCityTimes.havdalah;
    } else {
      console.error("Element with id 'cityTimes' was not found in the DOM");
    }
  };

  countrySelect.addEventListener("change", countryHandler);
  countrySelect.addEventListener("change", handler);
  citySelect.addEventListener("change", handler);
</script>
