---
import Layout from "../layouts/BaseLayout.astro";
import Link from "../components/Link.astro";
import { HebrewCalendar, HDate, Event } from "@hebcal/core";
import {
    getLeyningOnDate,
    getLeyningForParshaHaShavua,
    getLeyningForParsha,
} from "@hebcal/leyning";
const props = {
    title: "",
    description: "",
    image: "home",
};

function getSheminiAtzeretDate(year: number) {
    const holidays = HebrewCalendar.getHolidaysForYear(year);
    let sheminiAtzeretDate;

    for (let [hebrewDate, holidayEvents] of Object.entries(holidays)) {
        for (let holidayEvent of holidayEvents) {
            if (holidayEvent.getDesc() === "Shmini Atzeret") {
                sheminiAtzeretDate = holidayEvent.getDate().greg();
                break;
            }
        }
        if (sheminiAtzeretDate) break;
    }
    return sheminiAtzeretDate;
}

const currentYear = new Date().getFullYear();
const currentHebrewYear = new HDate().getFullYear();

let startDate = new HDate(getSheminiAtzeretDate(currentHebrewYear));
let endDate = new HDate(getSheminiAtzeretDate(currentHebrewYear + 1));

interface ReadingData {
    date: string;
    dateTime: string;
    portion: string | undefined;
    holiday: string | undefined;
    readingSummary: string;
    haftara: string;
}

const readingsData: ReadingData[] = [];

function handleReading(reading: any, date: HDate) {
    const dateObj = date.greg();
    const formattedDate = dateObj.toISOString().split("T")[0];

    const monthDayOptions: Intl.DateTimeFormatOptions = {
        month: "long",
        day: "numeric",
    };

    const otherDateFormatted = dateObj.toLocaleDateString(
        undefined,
        monthDayOptions
    );

    const portion =
        reading.parsha && reading.parsha.length > 1
            ? reading.parsha.join("-")
            : reading.parsha
            ? reading.parsha[0]
            : undefined;

    let holiday = reading.name.en;
    holiday = holiday.replace(/(\(on Shabbat\)|I|II)/g, "").trim();

    readingsData.push({
        date: otherDateFormatted,
        dateTime: formattedDate,
        portion: portion,
        holiday: holiday,
        readingSummary: reading.summary,
        haftara: reading.haftara,
    });
}

for (let date = startDate; date.deltaDays(endDate) <= 0; date = date.next()) {
    if (date.getDay() === 6) {
        const readings = getLeyningOnDate(date, false);

        if (Array.isArray(readings)) {
            // Loop through each Leyning object and handle it
            for (const reading of readings) {
                handleReading(reading, date);
            }
        } else {
            // We have a single Leyning object, so handle it
            handleReading(readings, date);
        }
    }
}

let currentWeekIndex: number;
const today = new Date();

for (let i = 0; i < readingsData.length; i++) {
    if (new Date(readingsData[i].dateTime) > today) {
        currentWeekIndex = i; // Get the previous week's reading if the current date has passed
        break;
    }
}

// console.log(readingsData);

// const parashat = 'Mishpatim';
// const events = HebrewCalendar.calendar({sedrot: true, noHolidays: true});
// const ev = events.find((ev) => ev.getDesc() == `Parashat ${parashat}`);
// const specialReading = getLeyningForParshaHaShavua(ev, false);
// const reading = getLeyningForParsha(parashat);
// console.log(`${ev.getDesc()}: ${specialReading.summary}`);
// console.log(reading.summary);
---

<Layout {...props}>
    <main>
        <h1>
            <time datetime={`${currentYear}`}>{currentYear}</time> Weekly Scripture
            Reading
        </h1>
        <article>
            <ul role="list">
                {
                    readingsData.map((reading, index) => (
                        <li
                            id={
                                index == currentWeekIndex
                                    ? `currentWeek`
                                    : `week${index}`
                            }
                        >
                            <span>
                                {index == currentWeekIndex ? (
                                    <span>This week's portion</span>
                                ) : (
                                    <time datetime={`${reading.dateTime}`}>
                                        {reading.date}
                                    </time>
                                )}
                            </span>

                            <div>
                                {reading.portion ? (
                                    <h3>Parashat {reading.portion}</h3>
                                ) : (
                                    <h3>{reading.holiday}</h3>
                                )}
                            </div>

                            <ul class="fa-ul">
                                <li>
                                    <span class="fa-li">
                                        <i class="fa-solid fa-scroll-torah" />
                                    </span>
                                    Torah: {reading.readingSummary}
                                </li>
                                <li>
                                    <span class="fa-li">
                                        <i class="fa-solid fa-book-tanakh" />
                                    </span>
                                    Haftara: {reading.haftara}
                                </li>
                            </ul>
                        </li>
                    ))
                }
            </ul>
        </article>
    </main>
</Layout>

<script>
    window.onload = function () {
        const elem = document.getElementById("currentWeek");
        if (elem) {
            // Check if the element exists before calling scrollIntoView
            elem.scrollIntoView();
        }
    };
</script>
